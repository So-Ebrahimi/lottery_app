[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for\\",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "db ",
        "description": "db ",
        "isExtraImport": true,
        "detail": "db ",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config",
        "description": "config",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class User(UserMixin):\n    \"\"\" A minimal and singleton user class used only for administrative tasks \"\"\"\n    def __init__(self, id):\n        self.id = id\n    def __repr__(self):\n        return \"%d\" % (self.id)\n# create some users with ids 1 to 20       \nuser = User(0)\ndef allowed_file(filename):\n    \"\"\" checks the extension of the passed filename to be in the allowed extensions\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "allowed_file",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def allowed_file(filename):\n    \"\"\" checks the extension of the passed filename to be in the allowed extensions\"\"\"\n    return '.' in filename and \\\n        filename.rsplit('.', 1)[1].lower() in config.ALLOWED_EXTENSIONS\n#root\n@app.route(\"/\")\n@login_required\ndef root():\n    return redirect(\"/home\")\n# some protected url",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def root():\n    return redirect(\"/home\")\n# some protected url\n@app.route('/home', methods=['GET', 'POST'])\n@login_required\ndef home():\n    '''home direct aff lottery web app '''\n    tables_name = find_tables_name()\n    df = pd.DataFrame()\n    count_winner, numberOfRows, prize_slice  = \"###\" , \"###\" ,\"###\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home():\n    '''home direct aff lottery web app '''\n    tables_name = find_tables_name()\n    df = pd.DataFrame()\n    count_winner, numberOfRows, prize_slice  = \"###\" , \"###\" ,\"###\"\n    if request.method == 'POST':\n        try : \n            table = request.form.get('table_name')\n            count_winner =  int(request.form.get('count_winner'))\n            numberOfRows , prize_slice = Find_prize_slice(table , count_winner )",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login():\n    \"\"\" user login: only for admin user (system has no other user than admin)\"\"\"\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']        \n        if username == config.CORRECT_USERNAME and password == config.CORRECT_PASSWORD :\n            login_user(user)\n            return redirect(\"/home\")\n        else:\n            return abort(401)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def db()  :\n    \"view database tables\"\n    df = pd.DataFrame()\n    tables_name = find_tables_name()\n    if request.method == 'POST':\n        try :\n            table_name = request.form.get('table_name')\n            df = table_view_of_db(table_name)\n        except :\n            return(\"error\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def upload_file():\n    '''update & upload new data to  database  '''\n    if request.method == 'POST':\n        # check if the post request has the file part\n        if 'file' not in request.files:\n            flash('No file part')\n            session['info'] = 'No file part'\n            return redirect(request.url)\n        file = request.files['file']\n        table_name = request.form.get('table_name')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "delete_t",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def delete_t()  :\n    \"delete database tables\"\n    Message =\"\"\n    tables_names = find_tables_name()\n    if request.method == 'POST':\n        table_name = request.form.get('table_name')\n        Message = delete_table(table_name)\n    return render_template(\"delete_db.html\", Message=Message ,tables_names = tables_names)\n@app.route('/download', methods=['GET'])\ndef download_result():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "download_result",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def download_result():\n    # File name\n    file_name = \"output.xlsx\"\n    # Send the file as a response\n    try:\n        return send_file(file_name, as_attachment=True)\n    except Exception as e:\n        return str(e)\n# somewhere to logout\n@app.route(\"/logout\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def logout():\n    logout_user()\n    return Response('<p>Logged out</p>')\n# handle login failed\n@app.errorhandler(401)\ndef page_not_found(e):\n    return render_template(\"401.html\")\n# handle 404 error\n@app.errorhandler(404)\ndef page_not_found(e):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def page_not_found(e):\n    return render_template(\"401.html\")\n# handle 404 error\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template(\"404.html\")\n# handle 500 error\n@app.errorhandler(500)\ndef page_not_found(e):\n    return render_template(\"500.html\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def page_not_found(e):\n    return render_template(\"404.html\")\n# handle 500 error\n@app.errorhandler(500)\ndef page_not_found(e):\n    return render_template(\"500.html\")\n# callback to reload the user object        \n@login_manager.user_loader\ndef load_user(userid):\n    return User(userid)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def page_not_found(e):\n    return render_template(\"500.html\")\n# callback to reload the user object        \n@login_manager.user_loader\ndef load_user(userid):\n    return User(userid)\nif __name__ ==  \"__main__\":\n    app.run(host=\"0.0.0.0\", port=\"12345\",debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def load_user(userid):\n    return User(userid)\nif __name__ ==  \"__main__\":\n    app.run(host=\"0.0.0.0\", port=\"12345\",debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n#local variable \napp.config['UPLOAD_FOLDER'] = config.UPLOAD_FOLDER\n# config SECRET_KEY\napp.config.update(\n    SECRET_KEY = config.SECRET_KEY\n)\n# flask-login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = config.UPLOAD_FOLDER\n# config SECRET_KEY\napp.config.update(\n    SECRET_KEY = config.SECRET_KEY\n)\n# flask-login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\nclass User(UserMixin):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\nclass User(UserMixin):\n    \"\"\" A minimal and singleton user class used only for administrative tasks \"\"\"\n    def __init__(self, id):\n        self.id = id\n    def __repr__(self):\n        return \"%d\" % (self.id)\n# create some users with ids 1 to 20       ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login_manager.login_view",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "login_manager.login_view = \"login\"\nclass User(UserMixin):\n    \"\"\" A minimal and singleton user class used only for administrative tasks \"\"\"\n    def __init__(self, id):\n        self.id = id\n    def __repr__(self):\n        return \"%d\" % (self.id)\n# create some users with ids 1 to 20       \nuser = User(0)\ndef allowed_file(filename):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "user = User(0)\ndef allowed_file(filename):\n    \"\"\" checks the extension of the passed filename to be in the allowed extensions\"\"\"\n    return '.' in filename and \\\n        filename.rsplit('.', 1)[1].lower() in config.ALLOWED_EXTENSIONS\n#root\n@app.route(\"/\")\n@login_required\ndef root():\n    return redirect(\"/home\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "UPLOAD_FOLDER = ''\nALLOWED_EXTENSIONS = {'xlsx'}\n# login cedentials\nCORRECT_USERNAME = \"sobhan\"\nCORRECT_PASSWORD = \"1234\"\n# generate one strong secret key for flask.\n# random long string with alphanumeric + #()*&\nSECRET_KEY = 'asddFADFAF#@12ea'\n#dataase configure\nDATABASE_PATH = \"sql.db\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ALLOWED_EXTENSIONS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "ALLOWED_EXTENSIONS = {'xlsx'}\n# login cedentials\nCORRECT_USERNAME = \"sobhan\"\nCORRECT_PASSWORD = \"1234\"\n# generate one strong secret key for flask.\n# random long string with alphanumeric + #()*&\nSECRET_KEY = 'asddFADFAF#@12ea'\n#dataase configure\nDATABASE_PATH = \"sql.db\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CORRECT_USERNAME",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "CORRECT_USERNAME = \"sobhan\"\nCORRECT_PASSWORD = \"1234\"\n# generate one strong secret key for flask.\n# random long string with alphanumeric + #()*&\nSECRET_KEY = 'asddFADFAF#@12ea'\n#dataase configure\nDATABASE_PATH = \"sql.db\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CORRECT_PASSWORD",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "CORRECT_PASSWORD = \"1234\"\n# generate one strong secret key for flask.\n# random long string with alphanumeric + #()*&\nSECRET_KEY = 'asddFADFAF#@12ea'\n#dataase configure\nDATABASE_PATH = \"sql.db\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SECRET_KEY = 'asddFADFAF#@12ea'\n#dataase configure\nDATABASE_PATH = \"sql.db\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DATABASE_PATH",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "DATABASE_PATH = \"sql.db\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "table_view_of_db",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def table_view_of_db(table_name) :\n        '''this function  findshow all of the memeber of db  '''\n        con = sqlite3.connect(config.DATABASE_PATH)\n        sql_query = pd.read_sql(f\"SELECT * FROM {table_name}\", con)\n        df = pd.DataFrame(sql_query)\n        con.commit()\n        con.close()\n        return (df)\ndef update_db(path ,table_name ,re_ap )  :\n    \"\"\"update database from xlsx file  \"\"\"",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "update_db",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def update_db(path ,table_name ,re_ap )  :\n    \"\"\"update database from xlsx file  \"\"\"\n    con = sqlite3.connect(config.DATABASE_PATH)\n    cur = con.cursor()\n    #upload new data to db \n    df = pd.read_excel(path)\n    df.to_sql(name=table_name,con=con,if_exists=re_ap ,index=False)\n    con.commit()\n    cur.execute(f\"SELECT Count(*) FROM {table_name}\" )\n    numberOfRows = cur.fetchone()[0]",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "Find_prize_slice",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def Find_prize_slice(table_name , count_winner ) :\n    '''this function  find winner by count of prize in table '''\n    con = sqlite3.connect(config.DATABASE_PATH)\n    cur = con.cursor()\n    cur.execute(\"SELECT Count() FROM %s\" % table_name )\n    numberOfRows = cur.fetchone()[0]\n    con.commit()\n    con.close()\n    prize_slice = numberOfRows /  count_winner\n    prize_slice = int(prize_slice)",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "find_winner_from_db",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def find_winner_from_db(table_name , id) :\n    '''this function  find winner by count of prize in table '''\n    con = sqlite3.connect(config.DATABASE_PATH)\n    cur = con.cursor()\n    rowsQuery = f\"SELECT * FROM {table_name} where ROW='{id}'\"\n    cur.execute(rowsQuery)\n    rows = cur.fetchall()\n    con.commit()\n    con.close()\n    winner_name , winer_phone = rows[0][1] , rows[0][2]",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "Find_winner_id",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def Find_winner_id( table_name, numberOfRows , prize_slice ,winner_id ):\n    \"\"\"this function find winner id and  return it  \"\"\"\n    range_win = int(numberOfRows / prize_slice ) \n    winners_dict = {}\n    start = 0 \n    for winer  in range(range_win):\n        id =  start + winner_id \n        winner_name , winer_phone = find_winner_from_db(table_name , id) \n        start += prize_slice\n        winner_dict = {\"winer index\" : winer + 1  , \"winner_name\"  :  winner_name  , \"winer_phone\" : winer_phone }",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "find_tables_name",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def find_tables_name():\n    '''this function return db tables name '''\n    con = sqlite3.connect(config.DATABASE_PATH)\n    cur = con.cursor()\n    Query = \"SELECT name FROM sqlite_master WHERE type='table';\"\n    cur.execute(Query)\n    tables_names  = cur.fetchall()\n    con.commit()\n    con.close()\n    table_list  = []",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "delete_table",
        "kind": 2,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "def delete_table(table_name):\n    try :\n        '''this function  delete table from db   '''\n        con = sqlite3.connect(config.DATABASE_PATH)\n        cur = con.cursor()\n        sql_query = f\"DROP TABLE {table_name} ;\"\n        cur.execute(sql_query)\n        con.commit()\n        con.close()\n        Message = \"data deleted  successfully\"",
        "detail": "db",
        "documentation": {}
    }
]